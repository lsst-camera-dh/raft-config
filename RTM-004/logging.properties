
# Properties file which configures the operation of the CCS
# logging facility.
 
# Global logging properties.
# ------------------------------------------
# The set of handlers to be loaded upon startup.
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
# do not put space characters in this list!
# handlers are loaded by the primordial log manager
 
handlers=java.util.logging.FileHandler,java.util.logging.ConsoleHandler
#handlersN=org.lsst.ccs.utilities.logging.ConsoleHandlerN,org.lsst.ccs.utilities.logging.FileHandlerN

## BEWARE: you CAN'T set  org.lsst.ccs.bus.utils.LogBusHandler HERE!
## because it is initialized later (when the buses are activated)
 
# Default global logging level.
# Loggers and Handlers may override this level
# SEE LSSTCCS-290
.level=WARNING

#The level of the CCS Root logger LSSTCCS-297
org.lsst.ccs.level=INFO
# Loggers
# ------------------------------------------
# Loggers are usually attached to packages.
# Here, the level for each package is specified.
# The global level is used by default, so levels
# specified here simply act as an override.
#myapp.ui.level=ALL
#myapp.business.level=CONFIG
#myapp.data.level=SEVERE
 

# Handlers
# -----------------------------------------
 
# --- ConsoleHandler ---
# Override of global logging level
java.util.logging.ConsoleHandler.level=INFO
 
## now you can set the level of the LogBusHandler here
org.lsst.ccs.messaging.LogBusHandler.level=WARNING

# --- FileHandler ---
# Override of global logging level
java.util.logging.FileHandler.level=ALL
 
# Naming style for the output file:
# (The output file is placed in the directory
# defined by the "user.home" System property.)
# use %t if temporary directory to be used (instead of %h)
# see below other CCS options

# the case where we use our own log property from Property "org.lsst.ccs.logdir"
java.util.logging.FileHandler.pattern=%L/ccs-logs-%A-%u.log

# the case where we use our own log property from Property "org.lsst.ccs.workdir"

# Limiting size of output file in bytes:

java.util.logging.FileHandler.limit=5000000
 
# Number of output files to cycle through, by appending an
# integer to the base file name:
java.util.logging.FileHandler.count=20

# Style of output (Simple or XML):
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter

# a special formatter that deals with StackTraces
## REMOVE THE NEXT LINE SOON LSSTCCS-546
org.lsst.ccs.bus.utils.LogBusHandler.formatter=org.lsst.ccs.utilities.logging.TextFormatter
org.lsst.ccs.messaging.LogBusHandler.formatter=org.lsst.ccs.utilities.logging.TextFormatter
java.util.logging.ConsoleHandler.formatter=org.lsst.ccs.utilities.logging.TextFormatter

# change that one if you want to modify the way StackTraces are printed
# negative value means all the stacktrace will be printed
org.lsst.ccs.logging.StackTraceFormats.depth=2
 
# Example to customize the SimpleFormatter output format
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
java.util.logging.SimpleFormatter.format=[%1$tc] %4$s: %5$s (%2$s)%n%6$s
# index starts at 1 : date, source, Logger, Level, message, throwableStr
# here we have <source> :<log message> <throwable>
org.lsst.ccs.utilities.logging.TextFormatter.format=%4$s: %5$s (%2$s) [%1$tc]%n%6$s
